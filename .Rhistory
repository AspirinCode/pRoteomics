load("Z:/R24/metabolites/.RData")
View(aa)
table=oa
groups<-unique(substr(names(table),start=2,stop=nchar(names(table))-2))
groups
head(oa)
head(t(oa))
head(oa)
head(t(oa))
head(oa)
oa[,2:8]
oat<-oa[,2:8]
row.names(oat)
row.names(oat)<-oa[,1]
row.names(oat)
head(t(oa))
head(t(oat))
head(t(oat),8)
gns<-c("con","fr","gl","hfd","hfd+fr","hfd+gl")
lapply(rep(gns),times=8)
lapply(FUN=rep,gns,times=8)
apply(FUN=rep,gns,times=8)
tapply(FUN=rep,gns,times=8)
sapply(FUN=rep,gns,times=8)
unlist(lapply(FUN=rep,gns,times=8))
gns.<-unlist(lapply(FUN=rep,gns,times=8))
gns.
row.names(oat)
gns2<-unlist(lapply(FUN=rep,gns,times=8))
gns10<-unlist(lapply(FUN=rep,gns,times=6))
group.names<-c(gns2,gns10)
group.names
row.names(oat)
paste(group.names,row.names(oat),sep="")
row.names(oat)<-paste(group.names,row.names(oat),sep="")
row.names(oat)
allgroups<-c("con2w","fr2w","gl2w","hfd2w","hfd+fr2w","hfd+gl2w","con10w","fr10w","gl10w","hfd10w","hfd+fr10w","hfd+gl10w")
allgroups
head(t(oat),8)
length(groups)
groups=='NA'
length(groups)
groups<-'NA'
length(groups)
groups=allgroups
table=oa
table=t(oat)
table
averaged<-data.frame(rep(0,times=nrow(table)))
if(groups=='NA'){
groups<-unique(substr(names(table),start=2,stop=nchar(names(table))-2))
}
if(length(groups)==1){
groups<-unique(substr(names(table),start=2,stop=nchar(names(table))-2))
}
groups
averaged<-data.frame(rep(0,times=nrow(table)))
rownames(averaged)<-rownames(table)
rownames(averaged)
i=1
for(x in groups){
tmp.grp<-grep(colnames(table),pattern=x)
if(i==1){
averaged[,1]<-rowMeans(table[,tmp.grp])
names(averaged)[i]<-groups[i]
}
if(i>=2){
averaged<-cbind(averaged,rowMeans(table[,tmp.grp]))
names(averaged)[i]<-groups[i]
}
i=i+1
}
head(averaged)
gns<-c("con","fr","gl","hfd","hfd_fr","hfd_gl")
allgroups<-c("con2w","fr2w","gl2w","hfd2w","hfd_fr2w","hfd_gl2w","con10w","fr10w","gl10w","hfd10w","hfd_fr10w","hfd_gl10w")
gns2<-unlist(lapply(FUN=rep,gns,times=8))
gns10<-unlist(lapply(FUN=rep,gns,times=6))
group.names<-c(gns2,gns10)
row.names(oat)<-paste(group.names,row.names(oat),sep="")
row.names(oat)<-oa[,1]
row.names(oat)<-oa[,1]
row.names(oat)<-paste(group.names,row.names(oat),sep="")
head(t(oat),8)
table=t(oat)
groups=allgroups
averaged<-data.frame(rep(0,times=nrow(table)))
if(length(groups)==1){
groups<-unique(substr(names(table),start=2,stop=nchar(names(table))-2))
}
averaged<-data.frame(rep(0,times=nrow(table)))
rownames(averaged)<-rownames(table)
i=1
for(x in groups){
tmp.grp<-grep(colnames(table),pattern=x)
if(i==1){
averaged[,1]<-rowMeans(table[,tmp.grp])
names(averaged)[i]<-groups[i]
}
if(i>=2){
averaged<-cbind(averaged,rowMeans(table[,tmp.grp]))
names(averaged)[i]<-groups[i]
}
i=i+1
}
head(averaged)
scaled<-t(scale(t(averaged)))
head(scaled)
sd(scaled[1,])
library(gplots)
library(RColorBrewer)
install.packages("gplots")
install.packages("RColorBrewer")
library(gplots)
library(RColorBrewer)
mycolors<-colorRampPalette(c("blue","white","red"))(n=50)
nrow(scaled)
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = T,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,5),labRow=F,tracecol = "black",key.title = "")
scaled
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = T,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,5),labRow=T,tracecol = "black",key.title = "")
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = T,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,5),labRow=T,tracecol = "black",key.title = "")
nrow(scaled)
heatmap.2(t(scaled),scale="none",col = mycolors,trace="none",Colv = F,Rowv = T,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,5),labRow=T,tracecol = "black",key.title = "")
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = T,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,10),labRow=T,tracecol = "black",key.title = "")
?heatmap.2
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = f,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,10),labRow=T,tracecol = "black",key.title = "")
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = F,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,10),labRow=T,tracecol = "black",key.title = "")
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = F,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,10),tracecol = "black",key.title = "")
install.packages("plotly")
library(plotly)
packageVersion('plotly')
p <- plot_ly(z = ~volcano) %>% add_surface()
chart_link = plotly_POST(p, filename="surface/1")
install.packages("latticeExtra")
library(latticeExtra)
cols<-function(n) {
colorRampPalette(c("#FFC0CB", "#CC0000"))(20)                                 # 20 distinct colors
}
?cloud
cloud(scaled, panel.3d.cloud = panel.3dbars, col="white",                      # white borders for bars
xbase = 1, ybase = 1, zlim = c(0, max(scaled)),                              # No space around the bars
scales = list(arrows = FALSE, just = "right"), xlab = NULL, ylab = NULL,
col.facet = level.colors(scaled, at = do.breaks(range(scaled), 20),
col.regions = cols,                                   # color ramp for filling the bars
colors = TRUE),
colorkey = list(col = cols, at = do.breaks(range(scaled), 20)),
screen = list(z = 65, x = -65))
install.packages("plot3D")
library(plot3D)
plot_ly(z = ~volcano) %>% add_surface()
plot_ly(z = ~scaled) %>% add_surface()
?plot_ly
scaled
plot_ly(z = ~scaled) %>% add_heatmap()
??plot3D
plot3D(scaled)
persp3D(scaled)
persp3D(z=scaled)
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = F,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,10),tracecol = "black",key.title = "")
group.aves=function(table=t(oat),groups=allgroups){
if(length(groups)==1){
groups<-unique(substr(names(table),start=2,stop=nchar(names(table))-2))
}
averaged<-data.frame(rep(0,times=nrow(table)))
rownames(averaged)<-rownames(table)
i=1
for(x in groups){
tmp.grp<-grep(colnames(table),pattern=x)
if(i==1){
averaged[,1]<-rowMeans(table[,tmp.grp])
names(averaged)[i]<-groups[i]
}
if(i>=2){
averaged<-cbind(averaged,rowMeans(table[,tmp.grp]))
names(averaged)[i]<-groups[i]
}
i=i+1
}
head(averaged)
scaled<-t(scale(t(averaged)))
head(scaled)
sd(scaled[1,])
library(gplots)
library(RColorBrewer)
mycolors<-colorRampPalette(c("blue","white","red"))(n=50)
nrow(scaled)
?heatmap.2
heatmap.2(scaled,scale="none",col = mycolors,trace="none",Colv = F,Rowv = F,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,10),tracecol = "black",key.title = "")
return(list(ave=averaged,scaled.ave=scaled))
}
oa.scaled<-group.aves(table=t(oat),groups=allgroups)
scaled
oa.scaled
oa.scaled
oa.scaled
View(aa)
head(t(aa))
aa[,2:8]
aa[,2:ncol(aa)]
aat<-aa[,2:ncol(aa)]
gns<-c("con","fr","gl","hfd","hfd_fr","hfd_gl")
allgroups<-c("con2w","fr2w","gl2w","hfd2w","hfd_fr2w","hfd_gl2w","con10w","fr10w","gl10w","hfd10w","hfd_fr10w","hfd_gl10w")
gns2<-unlist(lapply(FUN=rep,gns,times=8))
gns10<-unlist(lapply(FUN=rep,gns,times=6))
group.names<-c(gns2,gns10)
row.names(aat)<-aa[,1]
row.names(aat)
aa[,1]
head(aa)
aat<-aa[,1:ncol(aa)]
row.names(aat)
row.names(aat)<-paste(group.names,row.names(aat),sep="")
head(t(aat),8)
oa.scaled<-group.aves(table=t(oat),groups=allgroups)
aa.scaled<-group.aves(table=t(aat),groups=allgroups)
aa.scaled[[2]]
oa.scaled[[2]]
View(ac)
head(ac)
act<-aa[,1:ncol(ac)]
act<-ac[,1:ncol(ac)]
row.names(act)
row.names(act)<-paste(group.names,row.names(act),sep="")
head(act,8)
col.names(act)
colnames(act)
colnames(act)<-paste("ac",colnames(act),sep="")
colnames(act)
acoa<-read.delim(file="~/R24/metabolite_corr/acylcoA.txt",header = T, row.names = T)
acoa<-read.delim(file="~/R24/metabolite_corr/acylcoA.txt",header = T, row.names = 1)
head(acoa)
acoa<-read.delim(file="~/R24/metabolite_corr/acylcoA.txt",header = T, row.names = 1,stringsAsFactors = F)
head(acoa)
row.names(acoa)<-paste(group.names,row.names(acoa),sep = "")
colnames(acoa)
colnames(acoa)<-paste("coA."colnames(acoa),sep="")
colnames(acoa)<-paste("coA.",colnames(acoa),sep="")
colnames(acoa)
ac.scaled<-group.aves(table=t(act),groups=allgroups)
acoa.scaled<-group.aves(table=t(acoa),groups=allgroups)
rbind(
acoa.scaled[[2]],
oa.scaled[[2]],
aa.scaled[[2]],
ac.scaled[[2]]
)
allmetab<-rbind(
acoa.scaled[[2]],
oa.scaled[[2]],
aa.scaled[[2]],
ac.scaled[[2]]
)
write.table(sep="\t",x=allmetab,file="all.metabolites.zscaled.txt",quote = F, row.names = T,col.names = T)
getwd()
heatmap.2(allmetab,scale="none",col = mycolors,trace="none",Colv = F,Rowv = F,dendrogram = "none",main=paste(nrow(scaled),"rows, scaled"),margins = c(10,10),tracecol = "black",key.title = "")
getwd()
list.files()
setwd("~/R24/metabolite_corr/")
list.files()
ack<-read.delim("acK_sitelvl_signals.txt")
head(ack)
ack<-read.delim("acK_sitelvl_signals.txt",stringsAsFactors = F)
head(ack)
colnames(ack)
group.names
sitegrp<-c("con2w","fr2w","gl2w","hfd2w","hfd_fr2w","hfd_gl2w","con10w","fr10w","gl10w","hfd10w","hfd_fr10w","hfd_gl10w")
sgn<-unlist(lapply(FUN=rep,sitegrp,times=5))
sgn
colnames(ack)
sgn[1:59]
colnames(ack)[2:60]
colnames(ack)[2:60]<-sgn[1:59]
ack.scaled<-group.aves(table=ack,groups=allgroups)
ack.scaled
ack.scaled[[2]]->ack.z
sites=ack.z
metabolites=allmetab
head(acar)
head(metabolites)
head(sites)
metabolites[is.na(metabolites)]<-0
n.compare<-nrow(metabolites)
n.sites<-nrow(sites)
sites[is.na(sites)]<-0
outnames<-rownames(metabolites)
outnames
outlist.pos<-list()
outlist.neg<-list()
corval<-list()
for(i in 1:n.compare){
print(outnames[i])
for(j in 1:n.sites){
#print(j)
### keep all p values for q correction
### store only if pvalue<0.05
###
if(sum(as.numeric(sites[j,]))!=0 & sum(as.numeric(metabolites[i,]))!=0){
outlist.pos[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,]),method = "pearson")$p.value
#outlist.neg[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),-1*as.numeric(metabolites[i,]),method = "pearson")$p.value
#if(tmp<=0.05){
#  outlist[[outnames[i]]][[rownames(sites)[j]]]<-tmp
#}
}
#outlist[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,]),method = "spearman")$p.value
}
#why<-sapply(1:nrow(sites),function(j) cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,])))
#warnings()
}
hist(unlist(outlist))
qvalue(unlist(outlist))
hist(qvalue(unlist(outlist)),xlim=c(0,0.1))
tmp.q.pos<-qvalue(unlist(outlist.pos))$qvalue
require(qvalue)
install.packages("qvcalc")
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
tmp.q.pos<-qvalue(unlist(outlist.pos))$qvalue
require(qvalue)
tmp.q.pos<-qvalue(unlist(outlist.pos))$qvalue
tmp.q.pos[tmp.q.pos<=0.01]
head(sites)
ack.scaled[[2]]
head(ack)
rownames(ack)
rownames(ack)<-ack[,1]
rownames(ack)
acK<-ack[,2:60]
ack.scaled<-group.aves(table=acK,groups=allgroups)
ack.scaled[[2]]
ack.scaled[[2]]->ack.z
sites=ack.z
outlist<-list()
for(i in 1:n.compare){
print(outnames[i])
for(j in 1:n.sites){
#print(j)
### keep all p values for q correction
### store only if pvalue<0.05
###
if(sum(as.numeric(sites[j,]))!=0 & sum(as.numeric(metabolites[i,]))!=0){
outlist.pos[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,]),method = "pearson")$p.value
outlist.neg[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),-1*as.numeric(metabolites[i,]),method = "pearson")$p.value
#if(tmp<=0.05){
#  outlist[[outnames[i]]][[rownames(sites)[j]]]<-tmp
#}
}
outlist[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,]),method = "spearman")$p.value
}
#why<-sapply(1:nrow(sites),function(j) cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,])))
#warnings()
}
warnings()
hist(unlist(outlist))
qvalue(unlist(outlist))
hist(qvalue(unlist(outlist)),xlim=c(0,0.1))
unlist(outlist)
hist(unlist(outlist))
hist(unlist(outlist.pos))
hist(unlist(outlist.neg))
hist(unlist(outlist.pos))
hist(unlist(outlist.neg))
i=1
j=3
j=1
i=1
outlist.pos<-list()
outlist.neg<-list()
outlist<-list()
corval<-list()
for(i in 1:n.compare){
print(outnames[i])
for(j in 1:n.sites){
#print(j)
### keep all p values for q correction
### store only if pvalue<0.05
###
if(sum(as.numeric(sites[j,]))!=0 & sum(as.numeric(metabolites[i,]))!=0){
outlist.pos[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,]),method = "pearson")$p.value
outlist.neg[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),-1*as.numeric(metabolites[i,]),method = "pearson")$p.value
#if(tmp<=0.05){
#  outlist[[outnames[i]]][[rownames(sites)[j]]]<-tmp
#}
}
outlist[[outnames[i]]][[rownames(sites)[j]]]<-cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,]),method = "pearson")$p.value
}
#why<-sapply(1:nrow(sites),function(j) cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,])))
#warnings()
}
par(mfcol=c(1,3))
hist(unlist(outlist))
hist(unlist(outlist.pos))
hist(unlist(outlist.neg))
qvalue(unlist(outlist))
tmp.q.pos<-qvalue(unlist(outlist.pos))$qvalue
tmp.q.neg<-qvalue(unlist(outlist.neg))$qvalue
tmp.q.pos[tmp.q.pos<=0.01]
tmp.q.neg[tmp.q.neg<=0.01]
tmp.q.pos[tmp.q.pos<=0.05]
tmp.q.pos[tmp.q.pos<=0.02]
hist(qvalue(unlist(outlist)))
unlist(outlist.pos)
outlist.p<-unlist(outlist.pos)
outlist.p[outlist.p<=0.001]
outlist.p[outlist.p<=0.0000000001]
outlist.p[outlist.p<=0.000000001]
outlist.p[outlist.p<=0.00000001]
outlist.p[outlist.p<=0.0000001]
outlist.p[outlist.p<=0.000001]
cor.test(as.numeric(sites[j,]),as.numeric(metabolites[i,]),method = "pearson")
?cor.test
sites[,1]
tmp.q.pos[tmp.q.pos<=0.02]
sites["Q9JMA7_141",]
plot(sites["Q9JMA7_141",],metabolites["coA.linolenoyl",]
plot(sites)
plot(sites["Q9JMA7_141",],metabolites["coA.linolenoyl",])
lm(sites["Q9JMA7_141",]~metabolites["coA.linolenoyl",])
line1<-lm(sites["Q9JMA7_141",]~metabolites["coA.linolenoyl",])
line1[intersect()]
line1[intersect]
line1[inte]
line1$coefficients
line1$coefficients[1]
lines(line1$coefficients[1]+line1$coefficients[2]*x)
lines(line1$coefficients[1]+line1$coefficients[2]*x~y)
lines(y~line1$coefficients[1]+line1$coefficients[2]*x)
plot(line1)
library("annotate")
library("Category")
library("hgu95av2")
library("genefilter")
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
setwd("C:/users/jmeyer/documents/pRoteomics/")
setwd("C:/users/jmeyer/documents/GitHub/pRoteomics/")
read.csv(file="acK_1280sites_only.csv")->kac
head(kac)
sl<-read.delim(file="protein_level.txt")
kac<-read.delim(file="analysis_output.txt")
head(kac)
kac<-read.delim(file="analysis_output.txt")
head(kac)
library(reshape2)
kac.castFC <- dcast(data = kac, formula = Protein ~ Label2,value.var=c("log2FC"))
kac.castFDR <- dcast(data = kac, formula = Protein ~ Label2,value.var=c("FDR"))
head(sl)
head(kac.castFC)
order<-c(2,3,4,5,6,7)
head(kac.castFC)
kac.fc.order<-kac.castFC[,order]
kac.fdr.order<-kac.castFDR[,order]
row.names(kac.fc.order)<-gsub(kac.castFC[,1],pattern=".K\\+42.0105",replacement = "")
row.names(kac.fdr.order)<-gsub(kac.castFC[,1],pattern=".K\\+42.0105",replacement = "")
row.names(kac.fdr.order)
row.names(kac.fc.order)
row.names(sl)
head(sl)
row.names(sl)<-gsub(sl[,1],pattern=".K\\+42.0105",replacement = "")
row.names(sl)
row.names(kac.fc.order)
kac.significant<-kac.fdr.order<=0.01
kac.onlysig<-kac.fc.order
head(kac.fc.order)
kac.onlysig[kac.fdr.order>=0.01]<-NA
head(kac.onlysig)
head(kac.fdr.order)
colnames(kac.onlysig)<-c("Fruc","Gluc","HFD","HFD+Fruc","HFD+Gluc","HFD+gluc/HFD+Fruc")
rowSums(is.na(kac.onlysig))
is.na(kac.onlysig)
rowSums(is.na(kac.onlysig))[1]
rowSums(is.na(kac.onlysig))[3]
head(kac.onlysig)
rowSums(is.na(kac.onlysig))==6
kac.filtered<-kac.onlysig[rowSums(is.na(kac.onlysig))!=6,]
head(kac.filtered)
nrow(kac.filtered)
nrow(kac.onlysig)
pathway.files<-list.files(pattern="GSEA")
pathway.files
library(UniProt.ws)
biocLite("Uniprot.Ws")
biocLite("Uniprot.ws")
biocLite("UniProt.ws")
library(UniProt.ws)
geneids<-toupper(geneid)
bOx<-read.delim(pathway.files[6],skip = 1,head=T,stringsAsFactors = F)
unlist(bOx)
tmp.index<-is.na(match(geneids,unlist(bOx)))
up <- UniProt.ws(taxId=10090)
taxId(up) <- 10090
split_sp <- function(x)unlist(strsplit(x, " "))[1]
genemap <- select(up,unique(uniprot) , "GENES")
up <- UniProt.ws(taxId=10090)
library(UniProt.ws)
up <- UniProt.ws(taxId=10090)
install.packages("RSQLite")
biocLite("RSQLite")
install.packages("RSQLite")
install.packages("dplyr", repos = c(CRAN="https://cran.r-project.org/"))
install.packages("RSQLite", repos = c(CRAN="https://cran.r-project.org/"))
getwd()
